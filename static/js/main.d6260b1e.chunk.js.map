{"version":3,"sources":["Components/Light.js","Components/TrafficLight.js","App.js","serviceWorker.js","index.js"],"names":["Light","props","onClickhandle","setState","active","state","onClick","this","className","color","React","Component","TrafficLight","cambiosemaforo","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAuBeA,E,kDArBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAKVC,cAAgB,WACZ,EAAKC,SAAS,CACVC,QAAS,EAAKC,MAAMD,UANxB,EAAKC,MAAQ,CACTD,QAAS,GAHE,E,qDAcf,OAAS,yBACGE,QAASC,KAAKL,cACdM,UAAYD,KAAKF,MAAMD,OAAUG,KAAKN,MAAMQ,MAAQ,gBAAoBF,KAAKN,MAAMQ,MAAQ,e,GAjB3FC,IAAMC,WCkDXC,E,kDAhDX,aAAc,IAAD,8BACT,gBAKJC,eAAiB,WAEb,EAAKV,SAAS,CACVM,MAAO,UAEXK,YAAW,WACP,EAAKX,SAAS,CACVM,MAAO,aAEZ,KACHK,YAAW,WACP,EAAKX,SAAS,CACVM,MAAO,UAEZ,KACHK,YAAW,WACP,EAAKX,SAAS,CACVM,MAAO,OAEZ,MAvBH,EAAKJ,MAAQ,CACTI,MAAO,IAHF,E,qDA6BT,OAEQ,6BACI,yBAAKD,UAAU,aACX,yBAAKA,UAAU,WACP,yBAAKA,UAAU,YACf,yBAAKA,UAAU,QACX,kBAAC,EAAD,CAAOC,MAA4B,QAArBF,KAAKF,MAAMI,MAAkB,aAAe,QAC1D,kBAAC,EAAD,CAAOA,MAA4B,WAArBF,KAAKF,MAAMI,MAAqB,gBAAkB,WAChE,kBAAC,EAAD,CAAOA,MAA4B,UAArBF,KAAKF,MAAMI,MAAoB,eAAiB,YAG1E,4BAAQH,QAASC,KAAKM,gBAAtB,sB,GA1CGH,IAAMC,WCalBI,MAVf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d6260b1e.chunk.js","sourcesContent":["import React from 'react'\r\nclass Light extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active : false\r\n        }\r\n    }\r\n    onClickhandle = () => {\r\n        this.setState({\r\n            active: !this.state.active\r\n        });\r\n    }\r\n\r\n    \r\n    render(){\r\n        return ( <div \r\n                    onClick={this.onClickhandle} \r\n                    className={(this.state.active ? (this.props.color + ' light active') : (this.props.color + ' light'))}>\r\n                </div> \r\n                )\r\n    }\r\n}\r\nexport default Light;","import React from 'react'\r\nimport Light from './Light'\r\nclass TrafficLight extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            color: ''\r\n        }\r\n    }\r\n    cambiosemaforo = () => {\r\n        \r\n        this.setState({\r\n            color: 'green'\r\n        })\r\n        setTimeout(() => {\r\n            this.setState({\r\n                color: 'yellow'\r\n            })\r\n        }, 2000);\r\n        setTimeout(() => {\r\n            this.setState({\r\n                color: 'red'\r\n            })\r\n        }, 4000);\r\n        setTimeout(() => {\r\n            this.setState({\r\n                color: ''\r\n            })\r\n        }, 6000);\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n                \r\n                <div>\r\n                    <div className=\"container\">\r\n                        <div className=\"traffic\">\r\n                                <div className=\"soporte\"></div>\r\n                                <div className=\"base\">\r\n                                    <Light color={this.state.color === 'red' ? 'active red' : 'red'} />\r\n                                    <Light color={this.state.color === 'yellow' ? 'active yellow' : 'yellow'} />\r\n                                    <Light color={this.state.color === 'green' ? 'active green' : 'green'} />\r\n                                </div>\r\n                        </div>\r\n                        <button onClick={this.cambiosemaforo}>VERDE A ROJO</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default TrafficLight;","import React from 'react';\n\n// import './App.css';\nimport './sass/app.sass';\nimport TrafficLight from './Components/TrafficLight'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TrafficLight/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}